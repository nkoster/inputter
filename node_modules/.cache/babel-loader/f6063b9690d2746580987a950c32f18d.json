{"ast":null,"code":"var _jsxFileName = \"/home/niels/src/js/react/inputter/src/components/Lister.js\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  cellRenderer: ({\n    row\n  }) => /*#__PURE__*/_jsxDEV(\"a\", {\n    href: \"aap\",\n    children: row.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 30\n  }, this)\n}, {\n  field: 'kafka_topic',\n  headerName: 'Kafka Topic',\n  flex: 1\n}, {\n  field: 'kafka_offset',\n  headerName: 'Kafka Offset',\n  flex: 0.4,\n  renderCell: data => /*#__PURE__*/_jsxDEV(\"a\", {\n    href: \"https://ui.fhirstation.net/show/topic/\",\n    children: data.row.kafka_offset\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 13\n  }, this)\n}, {\n  field: 'identifier_type',\n  headerName: 'Identifier Type',\n  flex: 0.6\n}, {\n  field: 'identifier_value',\n  headerName: 'Identifier Value',\n  flex: 1\n}];\n\nconst pad = (num, size) => {\n  num = num.toString();\n\n  while (num.length < size) num = '0' + num;\n\n  return num;\n};\n\nconst Lister = ({\n  data,\n  limit\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '82vh',\n      width: '100%'\n    },\n    children: [data.length > 0 && data.length < limit && /*#__PURE__*/_jsxDEV(DataGrid, {\n      hideFooter: true,\n      rows: data.map(d => {\n        // d.kafka_offset = pad(parseInt(d.kafka_offset), 10)\n        return { ...d,\n          id: Math.random().toString(20)\n        };\n      }),\n      columns: columns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 52\n    }, this), data.length >= limit && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 14\n      },\n      children: \"Too many rows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Lister;\nexport default Lister;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lister\");","map":{"version":3,"sources":["/home/niels/src/js/react/inputter/src/components/Lister.js"],"names":["React","DataGrid","columns","cellRenderer","row","name","field","headerName","flex","renderCell","data","kafka_offset","pad","num","size","toString","length","Lister","limit","height","width","map","d","id","Math","random","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,YAAY,EAAE,CAAC;AAACC,IAAAA;AAAD,GAAD,kBAAW;AAAG,IAAA,IAAI,EAAC,KAAR;AAAA,cAAeA,GAAG,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA;AAD3B,CADc,EAId;AAAEC,EAAAA,KAAK,EAAE,aAAT;AAAwBC,EAAAA,UAAU,EAAE,aAApC;AAAmDC,EAAAA,IAAI,EAAE;AAAzD,CAJc,EAKd;AAAEF,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,UAAU,EAAE,cAArC;AAAqDC,EAAAA,IAAI,EAAE,GAA3D;AAAgEC,EAAAA,UAAU,EACxEC,IAAI,iBAAI;AAAG,IAAA,IAAI,EAAC,wCAAR;AAAA,cAAkDA,IAAI,CAACN,GAAL,CAASO;AAA3D;AAAA;AAAA;AAAA;AAAA;AADV,CALc,EAQd;AAAEL,EAAAA,KAAK,EAAE,iBAAT;AAA4BC,EAAAA,UAAU,EAAE,iBAAxC;AAA2DC,EAAAA,IAAI,EAAE;AAAjE,CARc,EASd;AAAEF,EAAAA,KAAK,EAAE,kBAAT;AAA6BC,EAAAA,UAAU,EAAE,kBAAzC;AAA6DC,EAAAA,IAAI,EAAE;AAAnE,CATc,CAAhB;;AAYA,MAAMI,GAAG,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACzBD,EAAAA,GAAG,GAAGA,GAAG,CAACE,QAAJ,EAAN;;AACA,SAAOF,GAAG,CAACG,MAAJ,GAAaF,IAApB,EAA0BD,GAAG,GAAG,MAAMA,GAAZ;;AAC1B,SAAOA,GAAP;AACD,CAJD;;AAMA,MAAMI,MAAM,GAAG,CAAC;AAACP,EAAAA,IAAD;AAAOQ,EAAAA;AAAP,CAAD,KAAmB;AAChC,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAAZ;AAAA,eACIV,IAAI,CAACM,MAAL,GAAc,CAAd,IAAmBN,IAAI,CAACM,MAAL,GAAcE,KAAlC,iBAA4C,QAAC,QAAD;AAAU,MAAA,UAAU,MAApB;AAAqB,MAAA,IAAI,EAAER,IAAI,CAACW,GAAL,CAASC,CAAC,IAAI;AACpF;AACA,eAAO,EAAE,GAAGA,CAAL;AAAQC,UAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcV,QAAd,CAAuB,EAAvB;AAAZ,SAAP;AACD,OAHuE,CAA3B;AAGzC,MAAA,OAAO,EAAEb;AAHgC;AAAA;AAAA;AAAA;AAAA,YAD/C,EAKGQ,IAAI,CAACM,MAAL,IAAeE,KAAf,iBAAwB;AAAG,MAAA,KAAK,EAAE;AAACQ,QAAAA,QAAQ,EAAE;AAAX,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAL3B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAVD;;KAAMT,M;AAYN,eAAeA,MAAf","sourcesContent":["import React from 'react'\nimport { DataGrid } from '@material-ui/data-grid'\n\nconst columns = [\n  {\n    cellRenderer: ({row}) => <a href='aap'>{row.name}</a>\n  },\n  { field: 'kafka_topic', headerName: 'Kafka Topic', flex: 1 },\n  { field: 'kafka_offset', headerName: 'Kafka Offset', flex: 0.4, renderCell:\n    data => <a href='https://ui.fhirstation.net/show/topic/'>{data.row.kafka_offset}</a>\n  },\n  { field: 'identifier_type', headerName: 'Identifier Type', flex: 0.6 },\n  { field: 'identifier_value', headerName: 'Identifier Value', flex: 1 },\n]\n\nconst pad = (num, size) => {\n  num = num.toString()\n  while (num.length < size) num = '0' + num\n  return num\n}\n\nconst Lister = ({data, limit}) => {\n  return (\n    <div style={{ height: '82vh', width: '100%' }}>\n      {(data.length > 0 && data.length < limit) && <DataGrid hideFooter rows={data.map(d => {\n        // d.kafka_offset = pad(parseInt(d.kafka_offset), 10)\n        return { ...d, id: Math.random().toString(20)}\n      })} columns={columns} />}\n      {data.length >= limit && <p style={{fontSize: 14}}>Too many rows</p>}\n    </div>\n  )\n}\n\nexport default Lister\n"]},"metadata":{},"sourceType":"module"}