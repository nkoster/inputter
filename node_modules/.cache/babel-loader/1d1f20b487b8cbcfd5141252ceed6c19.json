{"ast":null,"code":"var _jsxFileName = \"/home/niels/src/js/react/inputter/src/components/Lister.js\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst cellRenderer = data => {\n  console.log(data.row.kafka_offset);\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    href: data.row.kafka_offset,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    children: data.row.kafka_offset\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n};\n\nconst columns = [{\n  cellRenderer: ({\n    row\n  }) => /*#__PURE__*/_jsxDEV(\"a\", {\n    href: \"aap\",\n    children: row.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 30\n  }, this)\n}, {\n  field: 'kafka_topic',\n  headerName: 'Kafka Topic',\n  flex: 1\n}, {\n  field: 'kafka_offset',\n  headerName: 'Kafka Offset',\n  flex: 0.4,\n  valueGetter: cellRenderer\n}, {\n  field: 'identifier_type',\n  headerName: 'Identifier Type',\n  flex: 0.6\n}, {\n  field: 'identifier_value',\n  headerName: 'Identifier Value',\n  flex: 1\n}];\n\nconst pad = (num, size) => {\n  num = num.toString();\n\n  while (num.length < size) num = '0' + num;\n\n  return num;\n};\n\nconst Lister = ({\n  data,\n  limit\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '82vh',\n      width: '100%'\n    },\n    children: [data.length > 0 && data.length < limit && /*#__PURE__*/_jsxDEV(DataGrid, {\n      hideFooter: true,\n      rows: data.map(d => {\n        d.kafka_offset = pad(parseInt(d.kafka_offset), 10);\n        return { ...d,\n          id: Math.random().toString(20)\n        };\n      }),\n      columns: columns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 52\n    }, this), data.length >= limit && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 14\n      },\n      children: \"Too many rows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Lister;\nexport default Lister;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lister\");","map":{"version":3,"sources":["/home/niels/src/js/react/inputter/src/components/Lister.js"],"names":["React","DataGrid","cellRenderer","data","console","log","row","kafka_offset","columns","name","field","headerName","flex","valueGetter","pad","num","size","toString","length","Lister","limit","height","width","map","d","parseInt","id","Math","random","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,wBAAzB;;;AAEA,MAAMC,YAAY,GAAGC,IAAI,IAAI;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,GAAL,CAASC,YAArB;AACA,sBAAO;AAAG,IAAA,IAAI,EAAEJ,IAAI,CAACG,GAAL,CAASC,YAAlB;AAAgC,IAAA,MAAM,EAAC,QAAvC;AAAgD,IAAA,GAAG,EAAC,qBAApD;AAAA,cAA2EJ,IAAI,CAACG,GAAL,CAASC;AAApF;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAHD;;AAKA,MAAMC,OAAO,GAAG,CACd;AACEN,EAAAA,YAAY,EAAE,CAAC;AAACI,IAAAA;AAAD,GAAD,kBAAW;AAAG,IAAA,IAAI,EAAC,KAAR;AAAA,cAAeA,GAAG,CAACG;AAAnB;AAAA;AAAA;AAAA;AAAA;AAD3B,CADc,EAId;AAAEC,EAAAA,KAAK,EAAE,aAAT;AAAwBC,EAAAA,UAAU,EAAE,aAApC;AAAmDC,EAAAA,IAAI,EAAE;AAAzD,CAJc,EAKd;AAAEF,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,UAAU,EAAE,cAArC;AAAqDC,EAAAA,IAAI,EAAE,GAA3D;AAAgEC,EAAAA,WAAW,EAAEX;AAA7E,CALc,EAMd;AAAEQ,EAAAA,KAAK,EAAE,iBAAT;AAA4BC,EAAAA,UAAU,EAAE,iBAAxC;AAA2DC,EAAAA,IAAI,EAAE;AAAjE,CANc,EAOd;AAAEF,EAAAA,KAAK,EAAE,kBAAT;AAA6BC,EAAAA,UAAU,EAAE,kBAAzC;AAA6DC,EAAAA,IAAI,EAAE;AAAnE,CAPc,CAAhB;;AAUA,MAAME,GAAG,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACzBD,EAAAA,GAAG,GAAGA,GAAG,CAACE,QAAJ,EAAN;;AACA,SAAOF,GAAG,CAACG,MAAJ,GAAaF,IAApB,EAA0BD,GAAG,GAAG,MAAMA,GAAZ;;AAC1B,SAAOA,GAAP;AACD,CAJD;;AAMA,MAAMI,MAAM,GAAG,CAAC;AAAChB,EAAAA,IAAD;AAAOiB,EAAAA;AAAP,CAAD,KAAmB;AAChC,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAAZ;AAAA,eACInB,IAAI,CAACe,MAAL,GAAc,CAAd,IAAmBf,IAAI,CAACe,MAAL,GAAcE,KAAlC,iBAA4C,QAAC,QAAD;AAAU,MAAA,UAAU,MAApB;AAAqB,MAAA,IAAI,EAAEjB,IAAI,CAACoB,GAAL,CAASC,CAAC,IAAI;AACpFA,QAAAA,CAAC,CAACjB,YAAF,GAAiBO,GAAG,CAACW,QAAQ,CAACD,CAAC,CAACjB,YAAH,CAAT,EAA2B,EAA3B,CAApB;AACA,eAAO,EAAE,GAAGiB,CAAL;AAAQE,UAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcX,QAAd,CAAuB,EAAvB;AAAZ,SAAP;AACD,OAHuE,CAA3B;AAGzC,MAAA,OAAO,EAAET;AAHgC;AAAA;AAAA;AAAA;AAAA,YAD/C,EAKGL,IAAI,CAACe,MAAL,IAAeE,KAAf,iBAAwB;AAAG,MAAA,KAAK,EAAE;AAACS,QAAAA,QAAQ,EAAE;AAAX,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAL3B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAVD;;KAAMV,M;AAYN,eAAeA,MAAf","sourcesContent":["import React from 'react'\nimport { DataGrid } from '@material-ui/data-grid'\n\nconst cellRenderer = data => {\n  console.log(data.row.kafka_offset)\n  return <a href={data.row.kafka_offset} target='_blank' rel='noopener noreferrer'>{data.row.kafka_offset}</a>\n}\n\nconst columns = [\n  {\n    cellRenderer: ({row}) => <a href='aap'>{row.name}</a>\n  },\n  { field: 'kafka_topic', headerName: 'Kafka Topic', flex: 1 },\n  { field: 'kafka_offset', headerName: 'Kafka Offset', flex: 0.4, valueGetter: cellRenderer },\n  { field: 'identifier_type', headerName: 'Identifier Type', flex: 0.6 },\n  { field: 'identifier_value', headerName: 'Identifier Value', flex: 1 },\n]\n\nconst pad = (num, size) => {\n  num = num.toString()\n  while (num.length < size) num = '0' + num\n  return num\n}\n\nconst Lister = ({data, limit}) => {\n  return (\n    <div style={{ height: '82vh', width: '100%' }}>\n      {(data.length > 0 && data.length < limit) && <DataGrid hideFooter rows={data.map(d => {\n        d.kafka_offset = pad(parseInt(d.kafka_offset), 10)\n        return { ...d, id: Math.random().toString(20)}\n      })} columns={columns} />}\n      {data.length >= limit && <p style={{fontSize: 14}}>Too many rows</p>}\n    </div>\n  )\n}\n\nexport default Lister\n"]},"metadata":{},"sourceType":"module"}