[{"/home/niels/src/js/react/inputter/src/index.js":"1","/home/niels/src/js/react/inputter/src/reportWebVitals.js":"2","/home/niels/src/js/react/inputter/src/App.js":"3","/home/niels/src/js/react/inputter/src/components/Lister.js":"4","/home/niels/src/js/react/inputter/src/pages/Home.js":"5","/home/niels/src/js/react/inputter/src/pages/Details.js":"6","/home/niels/src/js/react/inputter/src/components/Timer.js":"7"},{"size":585,"mtime":1616064575144,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1614770788488,"results":"10","hashOfConfig":"9"},{"size":829,"mtime":1616073066625,"results":"11","hashOfConfig":"9"},{"size":1470,"mtime":1619390560254,"results":"12","hashOfConfig":"9"},{"size":8139,"mtime":1619476249674,"results":"13","hashOfConfig":"9"},{"size":3123,"mtime":1620040762464,"results":"14","hashOfConfig":"9"},{"size":519,"mtime":1618599212584,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"177u660",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/home/niels/src/js/react/inputter/src/index.js",[],["34","35"],"/home/niels/src/js/react/inputter/src/reportWebVitals.js",[],"/home/niels/src/js/react/inputter/src/App.js",[],"/home/niels/src/js/react/inputter/src/components/Lister.js",[],"/home/niels/src/js/react/inputter/src/pages/Home.js",["36","37","38","39","40","41","42"],"import { useState, useEffect, useRef } from 'react'\nimport '../App.css'\nimport { TextField, ThemeProvider, createMuiTheme, FormControl, Select, InputLabel, MenuItem } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { green, orange } from '@material-ui/core/colors'\nimport axios from 'axios'\nimport Lister from '../components/Lister'\nimport fhirDepartment2 from '../../src/pix/fire2.png'\nimport { ScaleLoader } from 'react-spinners'\nimport { Route, useLocation } from 'react-router-dom'\nimport Details from '../pages/Details'\nimport Timer from '../components/Timer'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst LIMIT = 52\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: orange[800],\n    },\n    secondary: {\n      main: green[800]\n    }\n  }\n})\n\nconst cancelTokenSource = axios.CancelToken.source()\n\nconst Home = _ => {\n\n  const useStyles = makeStyles({\n    '@global': {\n        '.MuiAutocomplete-option[data-focus=\"true\"]': {\n          background: 'darkorange',\n          color: 'white'\n        }\n    }\n  })\n\n  const styles = useStyles()\n\n  const [queryIdentifierValue, setQueryIdentifierValue] = useState('')\n  const [queryKafkaOffset, setQueryKafkaOffset] = useState('')\n  const [queryKafkaTopic, setQueryKafkaTopic] = useState('')\n  const [queryIdentifierType, setQueryIdentifierType] = useState('')\n  const [queryId] = useState(Math.random().toString(20).substr(2))\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [topicList, setTopicList] = useState([])\n\n  const defaultProps = {\n    options: topicList\n  }\n  \n  const img2 = useRef()\n\n  const location = useLocation()\n\n  const onChangeIdentifierValue = evt => {\n    setQueryIdentifierValue(evt.target.value)\n    setError('')\n  }\n\n  const onChangeKafkaOffset = evt => {\n    setQueryKafkaOffset(evt.target.value)\n    setError('')\n  }\n\n  const onChangeKafkaTopic = (_, v) => {\n    setQueryKafkaTopic(v)\n    setError('')\n  }\n\n  const onChangeIdentifierType = evt => {\n    setQueryIdentifierType(evt.target.value)\n    setError('')\n  }\n\n  useEffect(async _ => {\n    try {\n      const response = await axios.post('https://api.fhirstation.net/function/topiclister')\n      let list = response.data.map(i => i.kafka_topic)\n      list.unshift('')\n      setTopicList(list.sort())\n    } catch(err) {\n      console.log(err.message)\n    }\n  }, [])\n\n  useEffect(_ => {\n    const timeout = setTimeout(async _ => {\n      localStorage.setItem('queryIdentifierValue', queryIdentifierValue ? queryIdentifierValue : '')\n      localStorage.setItem('queryKafkaOffset', queryKafkaOffset ? queryKafkaOffset : '')\n      localStorage.setItem('queryKafkaTopic', queryKafkaTopic ? queryKafkaTopic : '')\n      localStorage.setItem('queryIdentifierType', queryIdentifierType ? queryIdentifierType : '')\n      if (queryIdentifierValue || queryKafkaOffset || queryKafkaTopic || queryIdentifierType) {\n        cancelTokenSource.cancel()\n        try {\n            setLoading(true)\n            /* Old API URL, not FaaS: https://api.fhirstation.net/api/v1/search/ */\n            await axios.post('https://api.fhirstation.net/function/seeker', {\n            cancelToken: cancelTokenSource.token,\n            search: {\n              queryIdentifierValue, queryKafkaOffset, queryKafkaTopic,\n              queryIdentifierType\n            },\n            queryId\n          })\n          .then(res => {\n            setData(res.data)\n            setLoading(false)\n          })\n        } catch(err) {\n          console.warn(err.message)\n          setLoading(false)\n        }\n      } else {\n        setLoading(false)\n        setData([])\n      }\n    }, 500)\n    if (!queryIdentifierValue && !queryKafkaOffset && !queryKafkaTopic && !queryIdentifierType) {\n      setLoading(false)\n    }\n    return _ => {\n      clearTimeout(timeout)\n    }\n  }, [queryIdentifierValue, queryKafkaOffset, queryKafkaTopic, queryIdentifierType])\n  \n  useEffect(_ => {\n    setQueryIdentifierValue(localStorage.getItem('queryIdentifierValue'))\n    setQueryKafkaOffset(localStorage.getItem('queryKafkaOffset'))\n    setQueryKafkaTopic(localStorage.getItem('queryKafkaTopic'))\n    setQueryIdentifierType(localStorage.getItem('queryIdentifierType'))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Route path=\"/details/:topic/:offset\" component={Details} />\n      {location.pathname === '/' &&\n      <header className=\"App-header\">\n        <ThemeProvider theme={theme}>\n          <div style={{ width: '100%' }}>\n            <div style={{ display: 'inline-flex', width: '90%', paddingBottom: '12px' }}>\n              <Autocomplete\n                ListboxProps={{ style: { maxHeight: '600px' } }}\n                {...defaultProps}\n                style={{ flex: '1.5', margin: 7, marginRight: 10, textAlign: 'left'}}\n                margin='dense'\n                variant='standard'\n                onChange={onChangeKafkaTopic}\n                value={queryKafkaTopic}\n                classes={styles}\n                renderInput={params => \n                  <TextField\n                    {...params}\n                    placeholder='none'\n                    label={`Kafka Topic (${topicList.length === 0 ? 'loading...' : topicList.length - 1})`}\n                  />}\n              />\n              <TextField\n                style={{ flex: '0.7', margin: 10 }}\n                margin='dense'\n                variant='standard'\n                onChange={onChangeKafkaOffset}\n                value={queryKafkaOffset}\n                color='primary'\n                type='search'\n                label='Kafka Offset'\n                placeholder='...'\n                spellCheck={false}\n              /> {/* text color in App.css: input */}\n              <TextField\n                style={{ flex: '1', margin: 10 }}\n                margin='dense'\n                variant='standard'\n                onChange={onChangeIdentifierType}\n                value={queryIdentifierType}\n                color='primary'\n                type='search'\n                label='Identifier Type'\n                placeholder='...'\n                spellCheck={false}\n                /> {/* text color in App.css: input */}\n              <TextField\n                style={{ flex: '1', margin: 10 }}\n                margin='dense'\n                variant='standard'\n                onChange={onChangeIdentifierValue}\n                value={queryIdentifierValue}\n                color='primary'\n                type='search'\n                label='Identifier Value'\n                placeholder='...'\n                spellCheck={false}\n                /> {/* text color in App.css: input */}\n            </div>\n            {data.length > 0 && <div style={{ display: 'inline-block', paddingTop: '20px', fontSize: '14px' }}>\n              <br />{data.length > 50 ? '50+' : data.length}<br />row{data.length === 1 ? '' : 's'}\n            </div>}\n            {loading ?\n              <div>\n                <ScaleLoader color='orange'/>\n                <p style={{ fontSize: '16px'}}>please wait, querying database... <Timer /></p>\n              </div> : (data.length > 0 && <Lister data={data} limit={LIMIT} />)}\n            {error && <p style={{ fontSize: '18px', color: 'black' }}>{error}</p>}\n            {data.length === 0 &&\n              !loading && !error && (queryIdentifierValue || queryKafkaOffset || queryKafkaTopic || queryIdentifierType) ?\n              <p style={{ fontSize: '16px', color: '#333', marginTop: 50 }}>please adjust your search...</p> :\n              null}\n            {(!queryIdentifierValue && !queryKafkaOffset && !queryKafkaTopic && !queryIdentifierType) &&\n              <div>\n                <img ref={img2} style={fire2Style} src={fhirDepartment2} alt='FHIR Station' />\n              </div>}\n          </div>\n        </ThemeProvider>\n      </header>}\n    </div>\n  )\n\n}\n\nconst fire1Style = {\n  padding: 0, margin: 0,\n  height: 300,\n  transition: 'height 1s'\n}\n\nconst fire2Style = {\n  padding: 0, margin: 0,\n  height: 250,\n  opacity: 1,\n  transition: 'opacity 1s'\n}\n\nexport default Home\n","/home/niels/src/js/react/inputter/src/pages/Details.js",["43","44","45"],"import React from 'react'\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { ScaleLoader } from 'react-spinners'\nimport { useHistory } from 'react-router-dom'\nimport { Tooltip } from '@material-ui/core'\nimport { Redirect } from 'react-router-dom'\n\nimport Timer from '../components/Timer'\n\nconst Details = props => {\n\n  const [ data, setData ] = useState({})\n  const [ messageObj, setMessageObj ] = useState({})\n  const [ loading, setLoading ] = useState(false)\n  const { topic, offset } = props.match.params\n  const { partition } = props.location.state\n  const history = useHistory()\n\n  useEffect(async _ => {\n    const cancelTokenSource = axios.CancelToken.source()\n    try {\n      setLoading(true)\n        await axios.post('https://offset.fhirstation.net/function/offsetter', {\n        topic, offset, partition,\n        cancelToken: cancelTokenSource.token\n      })\n      .then(res => {\n        setData(res.data)\n        console.log('DATA', res.data)\n        setMessageObj(res.data)\n        setLoading(false)\n      })\n    } catch(err) {\n      console.warn(err.message)\n      setLoading(false)\n    }\n  }, [])\n\n  if (!props.location.state) {\n    return (\n      <Redirect to='/' />\n      )\n  }\n  \n  return (\n    <div style={{display: 'flex', justifyContent: 'center'}}>\n      <div style={{display: 'flex', alignItems: 'center'}}>\n        <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n          <Tooltip title='go back' arrow>\n            <h3 style={{ flex: 1, justifyContent: 'center', cursor: 'pointer' }} onClick={_ => history.goBack()}><span>↤</span> &nbsp; {topic} / {offset}</h3>\n          </Tooltip>\n          {loading ? <div><ScaleLoader color='orange'/><p style={{ fontSize: '16px'}}>please wait, loading from kafka... <Timer /></p></div> :\n          <table style={{ flex: 1 }}>\n            <thead>\n              <tr>\n                <th style={{borderBottom: '1px solid #999' }}>partition</th>\n                <th style={{borderBottom: '1px solid #999' }}>offset</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>{partition}</td>\n                <td>{offset}</td>\n              </tr>\n            </tbody>\n          </table>\n          }\n          <div style={{ flex: 1 }}>\n            {loading || \n              <div>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style={{borderBottom: '1px solid #999' }}>raw message</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>\n                      <pre style={pre}>\n                        {JSON.stringify(messageObj, null, 2)}\n                      </pre>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst pre = {\n  padding: '10px',\n  textAlign: 'left',\n  fontSize: '13px',\n  fontWeight: 'bold',\n  background: '#eee',\n  borderRadius: '5px'\n}\n\nexport default Details\n","/home/niels/src/js/react/inputter/src/components/Timer.js",["46"],"import React, { useRef, useEffect, useState } from 'react'\n\nconst Timer = _ => {\n\n  const [num, setNum] = useState(Date.now())\n\n  let intervalRef = useRef()\n\n  const increaseNum = _ => {\n    setNum(Date.now() - num)\n  }\n  \n  useEffect(_ => {\n    setNum(Date.now())\n    intervalRef.current = setInterval(increaseNum, 10)\n    return _ => clearInterval(intervalRef.current)\n  }, [])\n\n  return (\n    <span style={{color: '#aaa'}}>\n      ({(Math.floor(num / 10) / 100).toFixed(2)}s)\n    </span>\n  )\n\n}\n\nexport default Timer\n",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":3,"column":52,"nodeType":"53","messageId":"54","endLine":3,"endColumn":63},{"ruleId":"51","severity":1,"message":"55","line":3,"column":65,"nodeType":"53","messageId":"54","endLine":3,"endColumn":71},{"ruleId":"51","severity":1,"message":"56","line":3,"column":73,"nodeType":"53","messageId":"54","endLine":3,"endColumn":83},{"ruleId":"51","severity":1,"message":"57","line":3,"column":85,"nodeType":"53","messageId":"54","endLine":3,"endColumn":93},{"ruleId":"58","severity":1,"message":"59","line":81,"column":13,"nodeType":"60","endLine":90,"endColumn":4},{"ruleId":"58","severity":1,"message":"61","line":130,"column":6,"nodeType":"62","endLine":130,"endColumn":84,"suggestions":"63"},{"ruleId":"51","severity":1,"message":"64","line":225,"column":7,"nodeType":"53","messageId":"54","endLine":225,"endColumn":17},{"ruleId":"51","severity":1,"message":"65","line":13,"column":11,"nodeType":"53","messageId":"54","endLine":13,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":20,"column":13,"nodeType":"60","endLine":38,"endColumn":4},{"ruleId":"58","severity":1,"message":"66","line":38,"column":6,"nodeType":"62","endLine":38,"endColumn":8,"suggestions":"67"},{"ruleId":"58","severity":1,"message":"68","line":17,"column":6,"nodeType":"62","endLine":17,"endColumn":8,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'Select' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'queryId'. Either include it or remove the dependency array.","ArrayExpression",["72"],"'fire1Style' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'offset', 'partition', and 'topic'. Either include them or remove the dependency array.",["73"],"React Hook useEffect has a missing dependency: 'increaseNum'. Either include it or remove the dependency array.",["74"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [queryIdentifierValue, queryKafkaOffset, queryKafkaTopic, queryIdentifierType, queryId]",{"range":"81","text":"82"},"Update the dependencies array to be: [offset, partition, topic]",{"range":"83","text":"84"},"Update the dependencies array to be: [increaseNum]",{"range":"85","text":"86"},[3915,3993],"[queryIdentifierValue, queryKafkaOffset, queryKafkaTopic, queryIdentifierType, queryId]",[1134,1136],"[offset, partition, topic]",[376,378],"[increaseNum]"]